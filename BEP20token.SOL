pragma solidity 0.5.17;

library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


contract Ownable {
    address public owner;
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() public {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "only owner can make this transaction");
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(
            newOwner != address(0),
            "new owner can not be a zero address"
        );
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}

contract BEP20Basic {
    function totalSupply() public view returns (uint256);

    function balanceOf(address who) public view returns (uint256);

    function transfer(address to, uint256 value) public returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
}

contract BEP20 is BEP20Basic {
    function allowance(address owner, address spender)
        public
        view
        returns (uint256);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) public returns (bool);

    function approve(
        address spender,
        uint256 value
    ) public returns (bool);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract BasicToken is BEP20Basic {
    using SafeMath for uint256;
    mapping(address => uint256) balances;
    uint256 totalSupply_;

    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    function _transfer(address _to, uint256 _value) internal returns (bool) {
        require(
            _to != address(0),
            "transfer to zero address is not  allowed"
        );
        require(
            _value <= balances[msg.sender],
            "sender does not have enough balance"
        );

        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        emit Transfer(
            msg.sender,
            _to, _value
        );
        return true;
    }

    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }
}


contract StandardToken is Ownable, BEP20, BasicToken {
    mapping(address => mapping(address => uint256)) internal allowed;
    mapping(address => bool) public tokenBlacklist;

    event Blacklisted(
        address indexed blackListed,
        bool value
    );

    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) public returns (bool) {
        require(
            _to != address(0),
            "transfer to zero address is not allowed"
        );
        require(
            _value <= balances[_from],
            "from address does not have enough balance"
        );
        require(
            _value <= allowed[_from][msg.sender],
            "sender does not have enough allowance"
        );
        require(
            !tokenBlacklist[msg.sender],
            "sender is blacklisted"
        );
        require(
            !tokenBlacklist[_from],
            "from address is blacklisted"
        );
        require(
            !tokenBlacklist[_to],
            "receiver is blacklisted"
        );

        balances[_from] = balances[_from]
            .sub(_value);

        balances[_to] = balances[_to]
            .add(_value);

        allowed[_from][msg.sender] = allowed[
                _from
            ]
            [
                msg.sender
            ].sub(_value);

        emit Transfer(
            _from,
            _to,
            _value
        );
        return true;
    }

    function transfer(
        address to,
        uint256 value
    ) public returns(bool) {
        require(
            !tokenBlacklist[msg.sender],
            "sender is blacklisted"
        );
        require(
            !tokenBlacklist[to],
            "receiver is blacklisted"
        );

        return _transfer(to, value);
    }

    function approve(address _spender, uint256 _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender)
        public
        view
        returns (uint256)
    {
        return allowed[
            _owner
        ]
        [
            _spender
        ];
    }

    function blackList(
        address _address,
        bool _isBlackListed
    ) public onlyOwner {
        tokenBlacklist[_address] = _isBlackListed;
        emit Blacklisted(_address, _isBlackListed);
    }

    function increaseApproval(address _spender, uint256 _addedValue)
        public
        returns (bool)
    {
        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(
            _addedValue
        );
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

    function decreaseApproval(address _spender, uint256 _subtractedValue)
        public
        returns (bool)
    {
        uint256 oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
}

contract Configuration {
    string public name = "PayAccept";
    string public symbol = "PAYT";
    uint256 public decimals = 18;
    uint256 public initial_supply = 45000000 * 10**18; // 45M
}

contract PaytToken is StandardToken,
    Configuration {
    constructor() public {
        balances[owner] = initial_supply;
        totalSupply_ = initial_supply;
        emit Transfer(
            address(0x0),
            owner,
            initial_supply
        );
    }

    function doAirdrop(
        address[] memory recipients,
        uint256[] memory values
    ) public onlyOwner {
        require(
            recipients.length == values.length,
            "recipients and values should have same number of values"
        );
        for (uint256 i = 0; i < recipients.length; i++) {
            balances[recipients[i]] = balances[recipients[i]]
                .add(values[i]);

            balances[owner] = balances[owner]
                .sub(values[i]);

             emit Transfer(
                owner,
                recipients[i],
                values[i]
            );
        }
    }
}
